<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bekaku.api.spring.mapper.FilesDirectoryMapper">
    <!--    Query-->
    <sql id="mainQueryBak">
        SELECT * FROM (
        SELECT cp.files_directory AS id
        ,c1.active
        ,cp.files_directory_parent AS filesDirectoryParentId
        ,c1.created_user AS createdUser
        ,c1.updated_user AS updatedUser
        ,GROUP_CONCAT(c2.id) filesDirectoryGroups
        ,GROUP_CONCAT(c2.`name` ORDER BY cp.`level` SEPARATOR '>') AS pathName
        ,c1.`name` AS name
        FROM files_directory_path cp
        LEFT JOIN files_directory AS c1 ON (cp.files_directory = c1.id)
        LEFT JOIN files_directory AS c2 ON (cp.files_directory_parent = c2.id)
        GROUP BY cp.files_directory ORDER BY cp.files_directory
        ) AS filesDirectory
    </sql>

    <sql id="mainQuery">
        SELECT cp.files_directory AS id
        ,c1.active
        ,c1.files_directory_parent AS filesDirectoryParentId
        ,c1.created_user AS createdUser
        ,c1.updated_user AS updatedUser
        ,c2.id directoryPath
        ,c2.`name` directoryPathName
        ,c1.`name` AS name
        FROM files_directory_path cp
        LEFT JOIN files_directory AS c1 ON (cp.files_directory = c1.id)
        LEFT JOIN files_directory AS c2 ON (cp.files_directory_parent = c2.id)
    </sql>

    <select id="findById" resultMap="findByIdResult">
        <include refid="mainQuery"/>
        WHERE cp.files_directory = #{id}
        ORDER BY cp.`level`
    </select>

    <select id="findByIdAndCrestedUserId" resultMap="findByIdResult">
        <include refid="mainQuery"/>
        WHERE filesDirectory.id = #{id} AND filesDirectory.created_user = #{createdUserId}
        ORDER BY cp.`level`
    </select>

    <!--Result Map-->
    <resultMap id="findByIdResult" type="com.bekaku.api.spring.dto.FilesDirectoryDto">
        <id column="id" property="id"/>
        <result column="active" property="active"/>
        <result column="filesDirectoryParentId" property="filesDirectoryParentId"/>
        <result column="name" property="name"/>
        <collection property="directoryPathIds" javaType="list" ofType="long">
            <result column="directoryPath"/>
        </collection>
        <collection property="directoryPathNames" javaType="list" ofType="string">
            <result column="directoryPathName"/>
        </collection>
    </resultMap>
</mapper>
