environments:
  production: true
spring:
  threads:
    virtual:
      enabled: true
  main:
#    lazy-initialization: true #websocket not work as expected
    allow-circular-references: true
    keep-alive: true
  profiles:
    #    active: prod
    active: dev
  #    active: localdocker
  jackson:
    deserialization:
      UNWRAP_ROOT_VALUE: true
  transaction:
    default-timeout: 30
  jpa:
    #    open-in-view: false
    properties:
      hibernate:
        order_inserts: true
        order_updates: true
        jdbc:
          batch_size: 50
    hibernate:
      ddl-auto: none # Hibernate ddl auto (create, create-drop, validate, update)
      use-new-id-generator-mappings: false
      properties:
        hibernate:
          query:
            in_clause_parameter_padding: true
            fail_on_pagination_over_collection_fetch: true
            optimizer:
              enabled: true
          default_batch_fetch_size: 30
          connection:
            provider_disables_autocommit: true
            handling_mode: DELAYED_ACQUISITION_AND_RELEASE_AFTER_TRANSACTION

  #        dialect: org.hibernate.dialect.MySQLDialect

  datasource:
    #    url: jdbc:mysql://${MYSQL_HOST:my.mysqlserver.com}:13537/springboot_bekaku?allowPublicKeyRetrieval=true&useSSL=false
    #    url: jdbc:mysql://${MYSQL_HOST:localhost}:3308/super_synapse?allowPublicKeyRetrieval=true&useSSL=false
    #    Docker mysql network
    url: jdbc:mysql://${MYSQL_HOST:YOUR_PRODUCTION_SERVER}:3306/spring_starter?allowPublicKeyRetrieval=true&useSSL=false
    username: root
    password: 'pwd'
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      pool-name: App-Instance-${WORKER_ID:1}
      connection-timeout: 30000 # slightly reduced for faster failure detection
      minimum-idle: 5 # more idle connections, helps under consistent load
      maximum-pool-size: 20 # scaled with 4 CPU cores, allows high concurrency 1cpu=8 ,4cores*8=32
      idle-timeout: 300000 # 5 mins, typical for keeping useful idle conns
      max-lifetime: 1800000 # 30 mins, matches MySQL default
      keepalive-time: 120000 #120000 keep connection alive every 2 mins
      autoCommit: true
      leak-detection-threshold: 30000 # warn if a connection is held >30s
      connection-test-query: SELECT 1
      data-source-properties:
        prepStmtCacheSize: 500 #doubled for high-load scenarios
        prepStmtCacheSqlLimit: 4096
        cachePrepStmts: true
        useServerPrepStmts: true
    pool-prepared-statements: true
    max-open-prepared-statements: 500
  thymeleaf:
    cache: false
    #spring.freemarker.suffix=.html
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
  h2:
    console:
      enabled:true
  mail:
    default-encoding: UTF-8
    host: mail.cloud.com
    port: 465
    username: mail@yourdomain.com
    password: 'pwd'
    properties:
      mail:
        smtp:
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
          auth: true
          socketFactory:
            port: 465
            class: javax.net.ssl.SSLSocketFactory
  #          starttls:
  #            enable: true
  mvc:
    async:
      request-timeout: 30000  # 30 seconds timeout for async requests
    #setting to default locale th_TH, en_US
    locale: th_TH
    #force locale resolver to spring boot reconized your settings
    locale-resolver: fixed

    # url pattern from resources/static can call with http://localhost:8080/content/about.html
    static-path-pattern: /content/**
    problemdetails:
      enabled: true
    throw-exception-if-no-handler-found: true
  resources:
    add-mappings: false
  servlet:
    multipart:
      #upload files configurations
      enabled: true
      #It specifies the maximum size permitted for uploaded files. The default is 1MB.
      max-file-size: 250MB
      # It specifies the maximum size allowed for multipart/form-data requests. The default is 10MB.
      max-request-size: 250MB
      file-size-threshold: 2MB
  http:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  rabbitmq:
    dynamic: true
    host: 127.0.0.1
    port: 5672
    username: local_jobs
    password: 'pwd'
    listener:
      simple:
        concurrency: 1
        retry:
          enabled: true
          initial-interval: 5000
          max-attempts: 10
          max-interval: 30000
          multiplier: 3.0
  kafka:
    bootstrap-servers: localhost:9092
    properties:
      client.telemetry.enabled: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: user-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
server:
  servlet:
    encoding:
      charset: UTF-8
      force-response: true
  connection-timeout: 5s
  max-http-header-size: 8KB
  port: 8080
  http2:
    enabled: true
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,application/json
  undertow:
    # I/O Threads (CPU cores * 2)
    io-threads: 8

    # Worker Threads (I/O Threads * 8)
    worker-threads: 64

    # Buffer Configuration 16 KB
    buffer-size: 16384
    direct-buffers: true

    # Connection Settings
    max-http-post-size: 50MB
    always-set-keep-alive: true

    # Connection Pool Configuration
    max-connections: 2000
    max-persistent-connections: 500
    no-request-timeout: 60s  # Time before dropping idle connections
    options:
      ENABLE_HTTP2: true  # Enable HTTP/2 for better performance
  error:
    include-message: always
    include-binding-errors: always
    whitelabel:
      enabled: false
  tomcat:
    #    max-swallow-size: 10MB
    max-http-post-size: 1MB
    accesslog:
      enabled: true
    accept-count: 100
    max-connections: 8192
    connection-timeout: 2000
    threads:
      max: 200
      min-spare: 20
logging:
  include-application-name: false
  config: classpath:log4j2-prod.xml
  pattern:
    rolling-file-name: "${LOG_FILE}.%d{yyyy-MM-dd}.%i"
  file:
    path: ${app.cdn-directory}logs
    max-history: 30
    total-size-cap: 10MB
    clean-history-on-start: true
  level:
    root: WARN
    web: WARN
    com.bekaku.api.spring: INFO
    org:
      springframework: ERROR
      hibernate:
        SQL: ERROR
        type: ERROR

#spring.freemarker.suffix=.html
mybatis:
  typeAliasesPackage: com.bekaku.api.spring.model
  # type-handlers-package: io.spring.infrastructure.mybatis
  # mybatis.mapper-locations=mybatis/*.xml
  mapperLocations: classpath:mybatis/*.xml
  configuration:
    cache-enabled: true
    default-statement-timeout: 3000
    map-underscore-to-camel-case: true
    use-generated-keys: true

management:
  endpoints:
    prometheus:
      enabled: true
    health:
      show-details: always
    web:
      exposure:
        include: health,metrics,prometheus,info,startup
  metrics:
    enable:
      hikari: true
    export:
      prometheus:
        enabled: true

app:
  cors:
    allowed-origins:
      - https://your-production-webapp.com
      - http://localhost      # Android Hybrid App (Prod)
      - https://localhost
      - capacitor://localhost # iOS Hybrid App (Prod)
      - ionic://localhost
  group: com.bekaku.api.spring
  domain: your-domain.com
  url: https://api.your-domain.com
  port: 443
  test-prop: production mode
  version: 1.0.0
  cdn-directory: /usr/spring-data/
  cdn-path: file:///${app.cdn-directory}
  #  cdn-path: file:////usr/spring-data/
  cdn-path-alias: cdn
  #  cdn-url: https://api.your-domain.com
  #  cdn-port: 443
  cdn-url: ${app.url}
  cdn-port: ${app.port}
  encrypt-key: jOwyyXyTbN/16DI5iIT0FMg==
  upload-image:
    limit-width: 1776
    limit-height: 1776
    max-resolution: 4096 # limit 4k resolution for upload
    create-thumbnail: true
    thumbnail-width: 196
    thumbnail-exname: '_thumb'
  queue:
    key: rx7ThHQf@S29
    name: myQueue
    name2: myQueue2
    userLevelFrequency: 1 #1 = every month, 2 = every 2 month, 3 = every 3 months
  fcm:
    user-topic: ${app.group}.fcm.user.
  loging:
    enable: true
  jwt:
    # SHA 512-bit Key
    secret: 962a5d50f2ee9f987e8d45d0687a1ead3315f8255b65e914709952a5606a304f5a5a651e3cf4dc6d759b956081cc1c8cf85cd4606287e443ea11f3a555f33c0a
    #millisecond default is 2592000= 1 month, 86400 = 1 days, 604800=7 days, 3600=1 hour, 900=15 minutes
    session-time: 86400
    session-refresh-time: 604800
    session-day: 30
    token-name: _server_jwt_key
    refresh-token-name: _server_refresh_key
  front-end:
    theme: NUXT_QUASAR #NUXT_QUASAR, QUASAR
  defaults:
    image: https://static.productionready.io/images/smiley-cyrus.jpg
    role: 2
    userpwd: 1234
  #Object properties
  mail-config:
    noreply-address: noreply@yourdomain.com
    #minutes
    tokenExpire: 15
    host: smtp.mailtrap.io
    port: 25
    username:
    password:
    protocol: smtp
  #List properties
  default-recipients:
    - admin@mail.com
    - owner@mail.com
  #Map Properties
  additional-headers:
    redelivery: true
    secure: true
  #Object list
  menus:
    - title: Home
      name: Home
      path: /
    - title: About
      name: About
      path: /about
  allow-mimes:
    - application/msword
    - application/vnd.openxmlformats-officedocument.wordprocessingml.document
    - application/vnd.ms-excel
    - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
    - application/vnd.ms-powerpoint
    - application/vnd.openxmlformats-officedocument.presentationml.presentation
    - application/pdf
    - application/vnd.rar
    - application/zip
    - image/jpeg
    - image/png
    - image/gif
    - image/webp
    - text/plain
    - text/csv
  cron:
    test-expression: 0 */2 * * * *
  worker:
    id: ${WORKER_ID:1} # fallback to 1 if not set
custom:
  config:
    file: Config Spring Startertemplate From PRODUCTION MODE (resources/application.yml)

